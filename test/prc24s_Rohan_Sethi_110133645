        //Rohan Sethi
        //110133645
        //Section:4


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <fcntl.h>

#define MAX_COMMAND_LENGTH 256
#define MAX_OUTPUT_LENGTH 1024
#define MAX_PATH_LENGTH 100
#define LINE_BUFFER_SIZE 20

int operation_flag = 0;

// Function to get the parent process ID (PPID) given the process ID (PID)
// Returns the parent process ID (PPID) on success, or 0 if there was an error or no PPID found
int get_parent_id(pid_t process_id) {
    FILE *fp;
    char path[MAX_PATH_LENGTH];
     char pid_str[10];

    // Construct the path to the status file of the process
    //sprintf(path, "/proc/%d/status", process_id);

    strcpy(path, "/proc/");
    snprintf(pid_str, sizeof(pid_str), "%d", process_id);
    strcat(path, pid_str);
    strcat(path, "/status");

    fp = fopen(path, "r");
    if (fp == NULL) {
        return -1;
    }

    int ppid;
    char line[LINE_BUFFER_SIZE];

    for (; fgets(line, sizeof(line), fp); ) {

char *ppid_str = strstr(line, "PPid:\t");
if (ppid_str != NULL) {
    ppid_str += strlen("PPid:\t");
    ppid = strtol(ppid_str, NULL, 10);
    fclose(fp);
    return ppid;
}
    }
    fclose(fp);

    // Return -1 if no PPID found or an error occurred
    return -1;
}
//this function will check t=if the process belng to same process tree using recursion
int is_same_process_tree(pid_t root_process, pid_t process_id) {
    int parent_pid = get_parent_id(process_id);
    
    // Check if the parent process ID matches the root process ID
    if (parent_pid == root_process) {
        printf("\nProcess Id: %d", process_id);
        printf("\nRoot Id: %d", root_process);
        return 1;
    } else if (parent_pid == -1) {
        return 0;
    } else {
        //else check the parent process recurssively
        return is_same_process_tree(root_process, parent_pid);
    }
}

// function to find the childern of the goven process if 
void find_children(pid_t parent_pid, pid_t *children, int *count) {
    DIR *proc_dir = opendir("/proc");
    struct dirent *entry;

    if (proc_dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }
//for loop for checking the proc file 
    for (entry = readdir(proc_dir); entry != NULL; entry = readdir(proc_dir)) {
        if (isdigit(entry->d_name[0])) {
            pid_t pid = atoi(entry->d_name);
            if (pid > 1 && get_parent_id(pid) == parent_pid) {
                children[*count] = pid;
                (*count)++;
            }
        }
    }

    closedir(proc_dir);
}

void kill_descendants_SIGKILL(pid_t root_pid) {
    DIR *proc_dir;
    struct dirent *entry;

    // Open the /proc directory
    proc_dir = opendir("/proc");
    if (proc_dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }

//do while loop for killing the process
        do {
        entry = readdir(proc_dir);
        if (entry != NULL) {
            // Check if the entry name is a number (indicating a process ID)
            if (isdigit(entry->d_name[0])) {
                pid_t pid = atoi(entry->d_name);
                if (pid > 1 && get_parent_id(pid) == root_pid) {
                    // Recursively kill descendants of this child process
                    kill_descendants_SIGKILL(pid);
                    // Kill the child process
                    if (kill(pid, SIGKILL) == -1) {
                        perror("kill");
                    } else {
                        printf("Killed process %d\n", pid);
                    }
                }
            }
        }
    } while (entry != NULL);

    // Close the /proc directory
    closedir(proc_dir);
}

//function to send SIGSTOP to the decendants
void kill_descendants_SIGSTOP(pid_t root_pid) {
    DIR *proc_dir;
    struct dirent *entry;

    // Open the /proc directory
    proc_dir = opendir("/proc");
    if (proc_dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }

    do {
        entry = readdir(proc_dir);
        if (entry != NULL) {
            // Check if the entry name is a number (indicating a process ID)
            if (isdigit(entry->d_name[0])) {
                pid_t pid = atoi(entry->d_name);
                if (pid > 1 && get_parent_id(pid) == root_pid) {
                    // Recursively stop descendants of this child process
                    kill_descendants_SIGSTOP(pid);
                    // Stop the child process
                    if (kill(pid, SIGSTOP) == -1) {
                        perror("kill");
                    } else {
                        printf("Stopped process %d\n", pid);
                    }
                }
            }
        }
    } while (entry != NULL);

    // Close the /proc directory
    closedir(proc_dir);
}
// function to send the SIGCount to the decendants
void kill_descendants_SIGCONT(pid_t root_pid) {
    DIR *proc_dir;
    struct dirent *entry;

    // Open the /proc directory
    proc_dir = opendir("/proc");
    if (proc_dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }

    do {
        entry = readdir(proc_dir);
        if (entry != NULL) {
            // Check if the entry name is a number (indicating a process ID)
            if (isdigit(entry->d_name[0])) {
                pid_t pid = atoi(entry->d_name);
                if (pid > 1 && get_parent_id(pid) == root_pid) {
                    // Recursively continue descendants of this child process
                    kill_descendants_SIGCONT(pid);
                    // Continue the child process
                    if (kill(pid, SIGCONT) == -1) {
                        perror("kill");
                    } else {
                        printf("Resumed process %d\n", pid);
                    }
                }
            }
        }
    } while (entry != NULL);

    // Close the /proc directory
    closedir(proc_dir);
}
// function to send SIGKILL to the process with process_id
void kill_process(pid_t process_id) {

    //if SIGKILL success then printf killed process else trough error
if (kill(process_id, SIGKILL) == 0) {
    printf("Killed process %d\n", process_id);
} else {
    perror("kill");
}
}
//functio to list the defunct descendants of the process if 
void list_defunct_descendants(pid_t process_id) {
    DIR *proc_dir;
    struct dirent *entry;
    pid_t pid;

    if ((proc_dir = opendir("/proc")) == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }

//this for loop will iterate over all the the process recursievely and call isDefunct function to check if the process is defunct or not and then print each process
for (entry = readdir(proc_dir); entry != NULL; entry = readdir(proc_dir)) {
    if (isdigit(entry->d_name[0])) {
        pid = atoi(entry->d_name);

        if (pid > 1) {
            int ppid = get_parent_id(pid);

            if (ppid == process_id) {
                if (is_defunct(pid)) {
                    printf("Defunct descendant: %d\n", pid);
                }
                // Recursively list defunct descendants
                list_defunct_descendants(pid);
            }
        }
    }
}

    closedir(proc_dir);
}

int is_defunct(pid_t process_id) {
    char path[MAX_PATH_LENGTH];
    char buffer[LINE_BUFFER_SIZE];
    FILE *fp;

    // Construct the path to the status file of the process
   // snprintf(path, sizeof(path), "/proc/%d/status", process_id);
    char pid_str[10];  // Array to hold the string representation of the process ID

    // Manually construct the path using strcpy and strcat
    strcpy(path, "/proc/");
    sprintf(pid_str, "%d", process_id);  // Convert process_id to string and store in pid_str
    strcat(path, pid_str);
    strcat(path, "/status");
    // Open the file using fopen
    fp = fopen(path, "r");
    if (fp == NULL) {
        perror("Error opening file");
        return 0;
    }

    // Read the file content
for (; fgets(buffer, sizeof(buffer), fp) != NULL;) {
    //printf(buffer);
    // Check for defunct state
    if (strstr(buffer, "State:\tZ (zombie)") != NULL) {
        fclose(fp);
        //printf("\nThe Process %d is Defunct Process.\n", process_id);
        return 1;
    }
}

    fclose(fp);
    return 0;
}

// Function to check if a process is an orphan
int is_orphan(pid_t process_id) {
    return get_parent_id(process_id) == 1;
}
//this process will list the siblings of the process id provided by checking for the process having same ppid as the process 
void list_sibling_processes(pid_t process_id) {
    int parent_pid = get_parent_id(process_id);
    if (parent_pid != -1) {
            DIR *proc_dir = opendir("/proc");
        if (proc_dir == NULL) {
            perror("opendir");
            exit(EXIT_FAILURE);
        }

        struct dirent *entry;
        do {
    entry = readdir(proc_dir);
    if (entry == NULL) break;

    if (isdigit(entry->d_name[0])) {
        pid_t pid = atoi(entry->d_name);
        if (pid > 1 && pid != process_id && get_parent_id(pid) == parent_pid) {
            printf("Sibling process: %d\n", pid);
        }
    }
} while (entry != NULL);


        closedir(proc_dir);
    } else {
    printf("Failed to get the parent process ID.\n");
    return;
}

}

// this function is a multi purpose function which can call itself recursively as well in some scenarios calling the other functions as well
void list_processes(pid_t process_id, const char *option, int level, int original_pid) {
    DIR *proc_dir;
    struct dirent *entry;
    pid_t pid;
    int original_ppid = get_parent_id(process_id);
    //printf("Original PPID of %d: %d\n", process_id, original_ppid);

    if ((proc_dir = opendir("/proc")) == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }

    while ((entry = readdir(proc_dir)) != NULL) {
        if (isdigit(entry->d_name[0])) {
            pid = atoi(entry->d_name);

            if (pid > 1) {
                int ppid = get_parent_id(pid);
//this will list the immediate decendants for the process
                if (strcmp(option, "-dd") == 0 && level == 1) {
                    if (ppid == process_id) {
                        printf("Immediate descendant: %d\n", pid);
                    }
                } else if (strcmp(option, "-nd") == 0) {
                    if (ppid == process_id) {
                    list_non_direct_descendants(process_id, original_pid, 1);
                    closedir(proc_dir);
                    return;
                } 
                }else if (strcmp(option, "-sb") == 0) {
                    if (ppid == original_ppid && pid != process_id) {
                        printf("Sibling: %d\n", pid);
                    }
                } 
                
                else if (strcmp(option, "-bz") == 0) {
                    if (ppid == original_ppid && pid != process_id && is_defunct(pid)) {
                        printf("Defunct sibling: %d\n", pid);
                    }
                }
            }
        }
    }

    closedir(proc_dir);
}
void list_grandchildren(pid_t process_id) {
    pid_t children[1024];
    int child_count = 0;

    // Find all children of the given process
    find_children(process_id, children, &child_count);

    pid_t grandchildren[1024];
    int grandchild_count = 0;

    // Find all grandchildren by finding the children of each child
                int i = 0;
                do {
                    find_children(children[i], grandchildren, &grandchild_count);
                    i++;
                } while (i < child_count);

    // Print the PIDs of all the grandchildren
    printf("Grandchildren of process %d:\n", process_id);
 i = 0;
if (grandchild_count > 0) {
    do {
        printf("%d\n", grandchildren[i]);
        i++;
    } while (i < grandchild_count);
}
}
void list_non_direct_descendants(pid_t root_pid, pid_t original_pid, int is_direct) {
    DIR *proc_dir = opendir("/proc");
    struct dirent *entry;
 
    if (proc_dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }
 
    for (entry = readdir(proc_dir); entry != NULL; entry = readdir(proc_dir)) {
        // Check if the entry name is a number (indicating a process ID)
        if (isdigit(entry->d_name[0])) {
            pid_t pid = atoi(entry->d_name);
            if (pid > 1 && get_parent_id(pid) == root_pid) {
                if (!is_direct) {
                    printf("Non-direct descendant: %d\n", pid);
                }
                // Recursively list descendants of this child process
                list_non_direct_descendants(pid, original_pid, 0);
            }
        }
    }
 
    closedir(proc_dir);
}
void kill_parent_of_zombies(pid_t process_id) {
    DIR *proc_dir;
    struct dirent *entry;

    // Open the /proc directory
    proc_dir = opendir("/proc");
    if (proc_dir == NULL) {
        //printf("\nHelooe");
        perror("opendir");
        exit(EXIT_FAILURE);
    }

do {
    entry = readdir(proc_dir);
    if (entry == NULL) break;

    // Check if the entry name is a number (indicating a process ID)
    if (isdigit(entry->d_name[0])) {
        pid_t pid = atoi(entry->d_name);
        if (pid > 1 && get_parent_id(pid) == process_id) {
            // Recursively check this child's descendants
            kill_parent_of_zombies(pid);

            // Check if this child is a zombie
            if (is_defunct(pid)) {
                int parent_pid = get_parent_id(pid);
                if (parent_pid > 1) {
                    // Kill the parent of the zombie process
                    if (kill(parent_pid, SIGKILL) == -1) {
                       // perror("kill");
                    } else {
                        printf("Killed parent process %d of zombie process %d\n", parent_pid, pid);
                    }
                }
            }
        }
    }
} while (entry != NULL);

    // Close the /proc directory
    closedir(proc_dir);
}

int main(int argc, char* argv[]) {
    // if number of arguements are <3 then it is not a valid input
    if (argc < 3) {
        printf("Insufficient arguments provided.\n");
        exit(EXIT_FAILURE);
    }
// case when no option is provided i.e when number of arguements is 3
    if (argc == 3) {
        pid_t process_id = atoi(argv[2]);
        pid_t root_process = atoi(argv[1]);

        if (!is_same_process_tree(root_process, process_id)) {
            printf("\nDoes not belong to the process tree\n");
            return EXIT_SUCCESS;
        } else {
            printf("\nProcess belongs to the process tree.\n");
        }
        
    }
    //when input size is >3 then its a valid input    
     else if (argc > 3) {
        pid_t process_id = atoi(argv[3]);
        pid_t root_process = atoi(argv[2]);
        char* option = argv[1];
        switch (option[1]) {
            //case when option starts from d 
        case 'd':
            switch (option[2]) {
                // under d case when the second letter is x
                case 'x':
                //case when input is -dx
                    if (strcmp(option, "-dx") == 0) {
                        kill_descendants_SIGKILL(root_process);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                //case when input is -dt
                case 't':
                    if (strcmp(option, "-dt") == 0) {
                        kill_descendants_SIGSTOP(root_process);
                    } 
                    //else invalid case
                    else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                case 'c':
                //case for -dc
                    if (strcmp(option, "-dc") == 0) {
                        kill_descendants_SIGCONT(root_process);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                case 'd'://case for -dd i.e direct decendants 
                    if (strcmp(option, "-dd") == 0) {
                        list_processes(process_id, option, 1, process_id);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                default:
                    fprintf(stderr, "Invalid option: %s\n", option);
                    exit(EXIT_FAILURE);
                    break;
            }
            break;
        case 'r':
            switch (option[2]) {
                case 'p'://case for killing the process with the provided process id
                    if (strcmp(option, "-rp") == 0) {
                        kill_process(process_id);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                default:
                    fprintf(stderr, "Invalid option: %s\n", option);
                    exit(EXIT_FAILURE);
                    break;
            }
            break;
        case 'n'://case for listing non direct decendants 
            switch (option[2]) {
                case 'd':
                    if (strcmp(option, "-nd") == 0) {
                        list_processes(process_id, option, 1, process_id);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                default:
                    fprintf(stderr, "Invalid option: %s\n", option);
                    exit(EXIT_FAILURE);
                    break;
            }
            break;
        case 's'://case for -sb,-sz
            switch (option[2]) {
                case 'b'://case for listing the siblings of a process 
                    if (strcmp(option, "-sb") == 0) {
                        list_processes(process_id, option, 1, process_id);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                case 'z'://case for checking the zombie process 
                    if (strcmp(option, "-sz") == 0) {
                        if (is_defunct(process_id)) {
                            printf("\n%d Defunct", process_id);
                        } else {
                            printf("\nNot Defunct %d \n",process_id);
                        }
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                default:
                    fprintf(stderr, "Invalid option: %s\n", option);
                    exit(EXIT_FAILURE);
                    break;
            }
            break;
        case 'b':// case for listing all the defucnt siblings
            switch (option[2]) {
                case 'z':
                    if (strcmp(option, "-bz") == 0) {
                        list_processes(process_id, option, 1, process_id);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                default:
                    fprintf(stderr, "Invalid option: %s\n", option);
                    exit(EXIT_FAILURE);
                    break;
            }
            break;
        case 'z'://case for -zd that is to list the defucnt decendants
            switch (option[2]) {
                case 'd':
                    if (strcmp(option, "-zd") == 0) {
                        //calling the list_defunct_decendants function
                        list_defunct_descendants(process_id);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                default:
                    fprintf(stderr, "Invalid option: %s\n", option);
                    exit(EXIT_FAILURE);
                    break;
            }
            break;
        case 'g'://case for listing the grandchildern
            switch (option[2]) {
                case 'c':
                    if (strcmp(option, "-gc") == 0) {
                        // calling the list_grandchildern function
                        list_grandchildren(process_id);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                default:
                    fprintf(stderr, "Invalid option: %s\n", option);
                    exit(EXIT_FAILURE);
                    break;
            }
            break;
        case 'k'://case for killing the parents or zombie process
            switch (option[2]) {
                case 'z':
                    if (strcmp(option, "-kz") == 0) {
                        //calling the kill_parent_pf_Zombies function
                        kill_parent_of_zombies(process_id);
                    } else {
                        fprintf(stderr, "Invalid option: %s\n", option);
                        exit(EXIT_FAILURE);
                    }
                    break;
                default:
                    fprintf(stderr, "Invalid option: %s\n", option);
                    exit(EXIT_FAILURE);
                    break;
            }
            break;
        default:
            fprintf(stderr, "Unknown option: %s\n", option);
            exit(EXIT_FAILURE);
            break;
    }

    }
    

    return 0;
}
